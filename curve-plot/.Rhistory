wilcox.test(clustercolor,selected_group$dyslipidemia)
wilcox.test(clustercolor,selected_group$diabetic)
wilcox.test(clustercolor,selected_group$hypertension)
wilcox.test(clustercolor,phenotype$obesity)
wilcox.test(phenotype$TG,clustercolor)
wilcox.test(phenotype$UA,clustercolor)
wilcox.test(phenotype$weight,clustercolor)
wilcox.test(phenotype$BMI,clustercolor)
wilcox.test(phenotype$waistline,clustercolor)
wilcox.test(obesityI,phenotype$TG)
wilcox.test(obesityI,phenotype$UA)
wilcox.test(obesityI,phenotype$weight)
wilcox.test(obesityI,phenotype$BMI)
wilcox.test(obesityI,phenotype$waistline)
#outstr <- paste(line[1], pvalue, sep="\t")
##################################################
cor(obesityI,phenotype$sex)
cor(obesityI,clustercolor)
cor(obesityI,selected_group$chronic.kidney.disease)
cor(obesityI,selected_group$hypeluricemia)
cor(obesityI,selected_group$dyslipidemia)
cor(obesityI,selected_group$diabetic)
cor(obesityI,selected_group$hypertension)
cor(clustercolor,phenotype$sex)
cor(clustercolor,selected_group$chronic.kidney.disease)
cor(clustercolor,selected_group$hypeluricemia)
cor(clustercolor,selected_group$dyslipidemia)
cor(clustercolor,selected_group$diabetic)
cor(clustercolor,selected_group$hypertension)
cor(clustercolor,phenotype$obesity)
cor(phenotype$TG,clustercolor)
cor(phenotype$UA,clustercolor)
cor(phenotype$weight,clustercolor)
cor(phenotype$BMI,clustercolor)
cor(phenotype$waistline,clustercolor)
cor(obesityI,phenotype$TG)
cor(obesityI,phenotype$UA)
cor(obesityI,phenotype$weight)
cor(obesityI,phenotype$BMI)
cor(obesityI,phenotype$waistline)
cor(phenotype$obesity,selected_group$dyslipidemia)
cor(obesityI,selected_group$dyslipidemia)
cor(phenotype$obesity,phenotype$sex)
cor(obesityI,phenotype$sex)
cor(phenotype$obesity,phenotype$sex)
cor(phenotype$obesity,clustercolor)
cor(phenotype$obesity,selected_group$chronic.kidney.disease)
cor(phenotype$obesity,selected_group$hypeluricemia)
cor(phenotype$obesity,selected_group$dyslipidemia)
cor(phenotype$obesity,selected_group$diabetic)
cor(phenotype$obesity,selected_group$hypertension)
cor(phenotype$UA,selected_group$hypeluricemia)
cor(phenotype$TG,selected_group$dyslipidemia)
2100+2398+2200+500+2450+1450
4380+3326+2630+1700+6750+2500+5600#=
1676+600+100+200+450+970+500+1400
7200+3102+1600+300+1483+400+1650+1200+1200+384+460+2302+400+490+1688#=
748+1353+3350+2000#=
5500+400+200#=
321+130+572+31#=
3190*2+4000+4000+4000+6000+3130+200+2000#=
33000*2+2000+3000+500#=
11000+29000+37920+22454+5099#=
2214*2#=
11098+26886+5896+23859+7451+6100+29710+71500+105473#=
200+4428
20319+4628+1288
11098+5896+29710#=
26886+23859+71500+105473#=
3297+16077+4428#=
23802/2
7451+6100=
d
7451+6100#=
956+1288
26886+23859
29710+71500
5896+23859
11098+26886
(71500+105473+26886+23859)/2
(71500+105473+26886+23859)/2-(29710+11098+5896)/2=113859#~=8038hkd
(71500+105473+26886+23859)/2-(29710+11098+5896)/2#~=8038hkd
6390+2214+4000
23802/2
23802/2+(4000-3526)
(71500+105473+26886+23859)/2-4000/2=90507#~=6390hkd
(71500+105473+26886+23859)/2-4000/2#=90507#~=6390hkd
(71500+105473+26886+23859)/2-50000/2#=111859#~=7888hkd
6266+2214+4000#=12604 #hkd ~= 1w rmb
23802/2
7400/2
10000+250000-1000-2300-2000-3000+18000-2600
10000+25000-1000-2300-2000-3000+18000-2600
10000+25000-1000-2300-2000-3000+18000-26000
10000+25000-1000-2300-2000-3000+18000-26000+5500
library
version
?.libPaths
getwd()
.libPaths()
update.packages(checkBuilt=TRUE)
update.packages(checkBuilt=TRUE)
update.packages(checkBuilt=TRUE)
update.packages(checkBuilt=TRUE)
install.packages("mgcv")
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("codetools", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("compiler", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:foreign", unload=TRUE)
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("Matrix", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(WGCNA)
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
library(WGCNA)
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
library(WGCNA)
library("wgcna")
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
library(WGCNA)
k=[1,12,13,24,5,35,56,7,45,67,34,56,33,56]
scaleFreeFitIndex = function(k, nBreaks = 10, removeFirst = FALSE)
{
#k, connectivity list for all genes in this beta
discretized.k = cut(k, nBreaks)
dk = tapply(k, discretized.k, mean)
p.dk = as.vector(tapply(k, discretized.k, length)/length(k))
breaks1 = seq(from = min(k), to = max(k), length = nBreaks +
1)
hist1 = hist(k, breaks = breaks1, plot = FALSE, right = TRUE)
dk2 = hist1$mids
dk = ifelse(is.na(dk), dk2, dk)
dk = ifelse(dk == 0, dk2, dk)
p.dk = ifelse(is.na(p.dk), 0, p.dk)
log.dk = as.vector(log10(dk))
if (removeFirst) {
p.dk = p.dk[-1]
log.dk = log.dk[-1]
}
log.p.dk = as.numeric(log10(p.dk + 1e-09))
lm1 = lm(log.p.dk ~ log.dk)
lm2 = lm(log.p.dk ~ log.dk + I(10^log.dk))
datout = data.frame(Rsquared.SFT = summary(lm1)$r.squared,
slope.SFT = summary(lm1)$coefficients[2, 1], truncatedExponentialAdjRsquared = summary(lm2)$adj.r.squared)
datout
}
k=c(1,12,13,24,5,35,56,7,45,67,34,56,33,56)
scaleFreeFitIndex(k)
#library and source
library(ggplot2)
library(wesanderson)
#load
path_list = "/Users/jiaxchen2/Desktop/v1Conserve/v1Conserve/output_simulation2/list_mac.txt"
#path_list = "/Users/jiaxchen2/Desktop/v1Conserve/v1Conserve/out_fromServer/output_simulation/list.txt"
file_list = as.matrix(read.delim(path_list, header = F, sep="\n"))
output_dir = "/Users/jiaxchen2/Desktop/conserveNetwork-latex/var5/output_of_R/"
mat = c("simulation_node_num","simulation_noise","method","k","pagerank_cutoff","cutoff_method","cutoff_value","correlation","pvalue")
for(file_i in c(1:dim(file_list)[1]))
{
filename = file_list[file_i]
data= read.delim(filename)
print(data[7,])
tmp_filename=unlist(strsplit(filename,"/"))
tmp_filename2=unlist(strsplit(tmp_filename[8],"_"))###default 9
simulation_node_num=tmp_filename2[1]
simulation_noise=tmp_filename2[3]
print(simulation_node_num)
if(pmatch("method",data[7,])==1)#start with method
{
#sep by ,
#if else record method, cutoff_method, cutoff...correlation....pvalue...
#retain an huge matrix, each sample a line, missing value record as NA
data=as.matrix(data[(8:(dim(data)[1])),])
for(i in c(1:(dim(data)[1])))
{
tmp = unlist(strsplit(data[i,],","))
print(tmp)
avg_correlation=NA
avg_pvalues=NA
if(tmp[1]=="pagerank"||tmp[1]=="pagerank_edges")
{
if(tmp[4]=="correlation")
{
correlations=as.numeric(tmp[5:length(tmp)])
avg_correlation=mean(correlations)###
tmp_record=c(simulation_node_num,simulation_noise,tmp[1],tmp[2],tmp[3],NA,NA,avg_correlation,avg_pvalues)
mat=rbind(mat, tmp_record)
}
if(tmp[4]=="pvalue")
{
pvalues=as.numeric(tmp[5:length(tmp)])
avg_pvalues=mean(pvalues)
}
}else{
print(file_i)
print(filename)
print(tmp)
if(tmp[4]=="correlation")
{
correlations=as.numeric(tmp[5:length(tmp)])
avg_correlation=mean(correlations)
tmp_record=c(simulation_node_num,simulation_noise,tmp[1],NA,NA,tmp[2],tmp[3],avg_correlation,avg_pvalues)
mat=rbind(mat, tmp_record)
}
if(tmp[4]=="pvalue")
{
pvalues=as.numeric(tmp[5:length(tmp)])
avg_pvalues=mean(pvalues)
}
}
}
}else{
print("header error, need check")
}
}
#for plot###
#line chart, multiple lines
#collect values. avg? accuracy
#matplot?
colnames(mat)=mat[1,]
mat = mat[2:dim(mat)[1],]
mat = as.matrix(mat)
#mat$simulation_noise=as.double(mat$simulation_noise)
#mat$correlation=as.double(mat$correlation)
group=rep(NA,dim(mat)[1])
for(i in c(1:dim(mat)[1]))
{
if(mat[i,3]=="pagerank"||mat[i,3]=="pagerank_edges")
{
group[i]=paste(mat[i,1],mat[i,3],sep="_")
}else{
group[i]=paste(mat[i,1],mat[i,3],mat[i,6],mat[i,7],sep="_")
}
}
mat=cbind(mat,group)
# Change the line type
for(node_num in unique_node_num)
{
A=which(mat[,1]==node_num,arr.ind = T)
filtered_mat=mat[A,]
filtered_mat=filtered_mat[order(filtered_mat[,10]),]
noise_level=as.double(filtered_mat[,2])
accuracy=as.double(filtered_mat[,8])
group=filtered_mat[,10]
df=data.frame(noise_level,accuracy,group)
df <- na.omit(df)
p1=ggplot(data=df, aes(x=noise_level, y=accuracy, group=group,colour=group)) +
geom_line()+#linetype = "dashed"
geom_point()
pdf(paste(output_dir, node_num,".pdf",sep=""),height = 14, width = 10)
print(p1)
dev.off()
}
simulation_node_num
#library and source
library(ggplot2)
library(wesanderson)
#load
path_list = "/Users/jiaxchen2/Desktop/v1Conserve/v1Conserve/output_simulation2/list_mac.txt"
#path_list = "/Users/jiaxchen2/Desktop/v1Conserve/v1Conserve/out_fromServer/output_simulation/list.txt"
file_list = as.matrix(read.delim(path_list, header = F, sep="\n"))
output_dir = "/Users/jiaxchen2/Desktop/conserveNetwork-latex/var5/output_of_R/"
mat = c("simulation_node_num","simulation_noise","method","k","pagerank_cutoff","cutoff_method","cutoff_value","correlation","pvalue")
for(file_i in c(1:dim(file_list)[1]))
{
filename = file_list[file_i]
data= read.delim(filename)
print(data[7,])
tmp_filename=unlist(strsplit(filename,"/"))
tmp_filename2=unlist(strsplit(tmp_filename[8],"_"))###default 9
simulation_node_num=tmp_filename2[1]
simulation_noise=tmp_filename2[3]
print(simulation_node_num)
if(pmatch("method",data[7,])==1)#start with method
{
#sep by ,
#if else record method, cutoff_method, cutoff...correlation....pvalue...
#retain an huge matrix, each sample a line, missing value record as NA
data=as.matrix(data[(8:(dim(data)[1])),])
for(i in c(1:(dim(data)[1])))
{
tmp = unlist(strsplit(data[i,],","))
print(tmp)
avg_correlation=NA
avg_pvalues=NA
if(tmp[1]=="pagerank"||tmp[1]=="pagerank_edges")
{
if(tmp[4]=="correlation")
{
correlations=as.numeric(tmp[5:length(tmp)])
avg_correlation=mean(correlations)###
tmp_record=c(simulation_node_num,simulation_noise,tmp[1],tmp[2],tmp[3],NA,NA,avg_correlation,avg_pvalues)
mat=rbind(mat, tmp_record)
}
if(tmp[4]=="pvalue")
{
pvalues=as.numeric(tmp[5:length(tmp)])
avg_pvalues=mean(pvalues)
}
}else{
print(file_i)
print(filename)
print(tmp)
if(tmp[4]=="correlation")
{
correlations=as.numeric(tmp[5:length(tmp)])
avg_correlation=mean(correlations)
tmp_record=c(simulation_node_num,simulation_noise,tmp[1],NA,NA,tmp[2],tmp[3],avg_correlation,avg_pvalues)
mat=rbind(mat, tmp_record)
}
if(tmp[4]=="pvalue")
{
pvalues=as.numeric(tmp[5:length(tmp)])
avg_pvalues=mean(pvalues)
}
}
}
}else{
print("header error, need check")
}
}
#for plot###
#line chart, multiple lines
#collect values. avg? accuracy
#matplot?
colnames(mat)=mat[1,]
mat = mat[2:dim(mat)[1],]
mat = as.matrix(mat)
#mat$simulation_noise=as.double(mat$simulation_noise)
#mat$correlation=as.double(mat$correlation)
group=rep(NA,dim(mat)[1])
for(i in c(1:dim(mat)[1]))
{
if(mat[i,3]=="pagerank"||mat[i,3]=="pagerank_edges")
{
group[i]=paste(mat[i,1],mat[i,3],sep="_")
}else{
group[i]=paste(mat[i,1],mat[i,3],mat[i,6],mat[i,7],sep="_")
}
}
mat=cbind(mat,group)
# Change the line type
unique_node_num = unique(simulation_node_num)
for(node_num in unique_node_num)
{
A=which(mat[,1]==node_num,arr.ind = T)
filtered_mat=mat[A,]
filtered_mat=filtered_mat[order(filtered_mat[,10]),]
noise_level=as.double(filtered_mat[,2])
accuracy=as.double(filtered_mat[,8])
group=filtered_mat[,10]
df=data.frame(noise_level,accuracy,group)
df <- na.omit(df)
p1=ggplot(data=df, aes(x=noise_level, y=accuracy, group=group,colour=group)) +
geom_line()+#linetype = "dashed"
geom_point()
pdf(paste(output_dir, node_num,".pdf",sep=""),height = 14, width = 10)
print(p1)
dev.off()
}
2800000/90
X=(1, 0, 0, 0, 0)
X=c(1, 0, 0, 0, 0)
Y=c(1.732, 1, 0, 0, 0)
Z=c(1, 1.732, 0, 0, 0)
cor(X,Y)
cor(X,Z)
cor(Y,Z)
1-sqrt(abs(cor(X,Y)))
1-sqrt(abs(cor(X,z)))
1-sqrt(abs(cor(X,Z)))
1-sqrt(abs(cor(Y,Z)))
1000*60/700
phyper(6,100,1865,100)
phyper(6,100,1865,10)
phyper(6,10,1865,100)
phyper(8,10,1865,100)
phyper(8,10,1965,100)
phyper(8,100,1965,100)
phyper(8,100,1965,10)
phyper(8,100,1965,100)
phyper(8,10,100,10)
14/1965
72/1965
1965*0.05
citation("GO.db")
citation("org.Hs.eg.db")
citation("Biobase")
citation("DBI")
citation("GOstats")
27/35
install.packages("BiocManager")
install.packages("BiocManager")
file = "/Users/jiaxchen2/Desktop/network-Nov/0_input/human_mouse_singleCell/GSE44183_mouse_expression_mat.txt"
data = read.table(file,header = T,row.names = 1)
indata_file = "/Users/jiaxchen2/Desktop/pyWorkspace/network_pipeline/midline_output/preprocessing_out/T_abundance.csv"
data = read.table(file,header = T,row.names = 1)
data = read.table(indata_file,header = T,row.names = 1)
indata_file = "/Users/jiaxchen2/Desktop/pyWorkspace/network_pipeline/midline_output/preprocessing_out/T_abundance.csv"
data = read.table(indata_file,header = T,row.names = 1)
data = read.csv(indata_file,header = T,row.names = 1)
View(data)
indata_file = "/Users/jiaxchen2/Desktop/pyWorkspace/network_pipeline/midline_output/preprocessing_out/T_abundance.csv"
data = read.csv(indata_file,header = T,row.names = 1)
data2 = data[,c(1:26)]
write.csv(data2,file=indata_file,quote=F)
setwd("~/Desktop/2018.10.9/figure-plot")
library(ggplot2)
x=c(-1,0.1,1)
#r
x0=-1
gap=0.0001
x=c()
y_abs=c()
y_root=c()
y_square=c()
y_half=c()
xi=x0
while(T)
{
yi_r=sqrt(1-abs(xi))
yi_s=sqrt(1-xi^2)
yi_a=1-abs(xi)
yi_h=sqrt((1-xi)/2)
x=c(x,xi)
y_root=c(y_root,yi_r)
y_square=c(y_square,yi_s)
y_abs=c(y_abs,yi_a)
y_half=c(y_half,yi_h)
xi=xi+gap
if(xi>1)
{
break
}
}
####form df for ggplot######
x_all=c(as.numeric(x),as.numeric(x),as.numeric(x),as.numeric(x))
y_all=c(as.numeric(y_abs),as.numeric(y_root),as.numeric(y_square),as.numeric(y_half))
category_all=c(rep("1abs",length(y_abs)),rep("2root",length(y_root)),rep("3square",length(y_square)),rep("4half",length(y_half)))
df=data.frame(x_all,y_all,category_all)
p1=ggplot(data=df,aes(x=c(df$x_all),y=c(df$y_all),color=as.character(c(category_all)),linetype=as.character(c(category_all))))+
geom_path()+theme_light(base_size = 15)
pdf("test1_compareSensitive.pdf",width = 12,height = 10)
#plot(x,y_root)
print(p1)
dev.off()
#######traditional plot#####
pdf("test_root_compareSensitive.pdf")
plot(x,y_root)
dev.off()
pdf("test1_abs_compareSensitive.pdf")
plot(x,y_abs)
dev.off()
pdf("test1_square_compareSensitive.pdf")
plot(x,y_square)
dev.off()
library(ggplot2)
x=c(-1,0.1,1)
#r
x0=-1
gap=0.0001
x=c()
y_abs=c()
y_root=c()
y_square=c()
y_half=c()
xi=x0
while(T)
{
yi_r=sqrt(1-abs(xi))
yi_s=sqrt(1-xi^2)
yi_a=1-abs(xi)
yi_h=sqrt((1-xi)/2)
x=c(x,xi)
y_root=c(y_root,yi_r)
y_square=c(y_square,yi_s)
y_abs=c(y_abs,yi_a)
y_half=c(y_half,yi_h)
xi=xi+gap
if(xi>1)
{
break
}
}
####form df for ggplot######
x_all=c(as.numeric(x),as.numeric(x),as.numeric(x),as.numeric(x))
y_all=c(as.numeric(y_abs),as.numeric(y_root),as.numeric(y_square),as.numeric(y_half))
category_all=c(rep("1abs",length(y_abs)),rep("2root",length(y_root)),rep("3square",length(y_square)),rep("4half",length(y_half)))
df=data.frame(x_all,y_all,category_all)
p1=ggplot(data=df,aes(x=c(df$x_all),y=c(df$y_all),color=as.character(c(category_all)),linetype=as.character(c(category_all))))+geom_path()+theme_light(base_size = 15)
pdf("test1_compareSensitive.pdf",width = 12,height = 10)
#plot(x,y_root)
print(p1)
dev.off()
#######traditional plot#####
pdf("test_root_compareSensitive.pdf")
plot(x,y_root)
dev.off()
pdf("test1_abs_compareSensitive.pdf")
plot(x,y_abs)
dev.off()
pdf("test1_square_compareSensitive.pdf")
plot(x,y_square)
dev.off()
